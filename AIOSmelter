program AIOSmelter;
{$Define Smart8}
{$I SRL/SRL.Simba}
{$I SPS/SPS.Simba}
{$i SRL/SRL/Misc/Debug.simba}
{$I SRL/SRL/Misc/SmartGraphics.Simba}

const
  MEMBERS           = True; // Member or not
  NUMBOFPLAYERS     = 1;
  STARTPLAYER       = 0;
  WHATTOSMELT       = 'Steel'; // Support for Bronze, Iron, Steel, Gold, Adamant and Rune
  PRIMARYORESLOT    = 7;
  SECONDARYORESLOT  = 8;
  COALBAG           = True; // True or False   , put it in the the first Inventory slot

type TOreInfo = record
  POreDTM, SOreDTM, BarDTM, BarBMP, WithBMP, Coordinate: Integer;
  Upt:String;
end;

var
  CopperOreDTM, TinOreDTM, CoalDTM, x, y, StartEXP, Bars, CoalBagz, SmeltBMP: integer;
  ToFurnace, ToBank: TPointArray;
  Ore, Bar, Bur, Up, X1, Y1, X2, Y2: TOreInfo;
  aFound: Extended;

procedure DeclarePlayers;
  var i:integer;
begin
  NumberOfPlayers(NumbOfPlayers);
  CurrentPlayer := StartPlayer
  for i := 0 to NumbOfPlayers-1 do

  With Players[0] do
    begin
      Name := ''; //Username.
      Pass := ''; //Password.
      Nick := ''; //Nickname
      Pin  := ''; // Pin
      Active := True;
    end;
end;


{//By Benland100, modified by Ashaman88 to shift mouse speeds after every step
procedure SuperWindMouse(xs, ys, xe, ye, gravity, wind, minWait, maxWait, maxStep, targetArea: extended);
var
  veloX,veloY,windX,windY,veloMag,dist,randomDist,lastDist,step: extended;
  lastX,lastY,MSP,W: integer;
  sqrt2,sqrt3,sqrt5: extended;
begin
  MSP  := MouseSpeed;
  sqrt2:= sqrt(2);
  sqrt3:= sqrt(3);
  sqrt5:= sqrt(5);
  while hypot(xs - xe, ys - ye) > 1 do
  begin
    dist:= hypot(xs - xe, ys - ye);
    wind:= minE(wind, dist);
    if dist >= targetArea then
    begin
      windX:= windX / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
      windY:= windY / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
    end else
    begin
      windX:= windX / sqrt2;
      windY:= windY / sqrt2;
      if (maxStep < 3) then
      begin
        maxStep:= random(3) + 3.0;
      end else
      begin
        maxStep:= maxStep / sqrt5;
      end;
    end;
    veloX:= veloX + windX;
    veloY:= veloY + windY;
    veloX:= veloX + gravity * (xe - xs) / dist;
    veloY:= veloY + gravity * (ye - ys) / dist;
    if hypot(veloX, veloY) > maxStep then
    begin
      randomDist:= maxStep / 2.0 + random(round(maxStep) div 2);
      veloMag:= sqrt(veloX * veloX + veloY * veloY);
      veloX:= (veloX / veloMag) * randomDist;
      veloY:= (veloY / veloMag) * randomDist;
    end;
    lastX:= Round(xs);
    lastY:= Round(ys);
    xs:= xs + veloX;
    ys:= ys + veloY;

    case Random(50) of
      1..25: W := (MSP + (Random((MSP/4))));
      26..50: W := (MSP - (RandomRange((MSP/2), MSP-1)));
    end;
    if (W < 1) then
      W := 1;

    if (lastX <> Round(xs)) or (lastY <> Round(ys)) then
      MoveMouse(Round(xs), Round(ys));

    step:= hypot(xs - lastX, ys - lastY);
    W := round((maxWait - minWait) * (step / maxStep) + minWait);
    wait(W);
    lastdist:= dist;
  end;

  if (Round(xe) <> Round(xs)) or (Round(ye) <> Round(ys)) then
    MoveMouse(Round(xe), Round(ye));

  MouseSpeed := MSP;
end;

procedure HumanMMouse(eX, eY, ranX, ranY: Integer);
var
  randSpeed: extended;
  X,Y,X2,Y2,j,Dist,MP: integer;
begin
  j := MouseSpeed;
  GetMousePos(X, Y);
  Dist := Distance(X, Y, eX, eY);
  MP := Round(Dist/150);
  if MP < 0 then
    MP := 1;

  randSpeed := (random(MouseSpeed) / 2.0 + MouseSpeed) / 10.0;
  X2 := RandomRange(eX-(j*MP), eX+(j*MP));
  Y2 := RandomRange(eY-(j*MP), eY+(j*MP));
  SuperWindMouse(X, Y, X2, Y2, 11, 8, 10.0 / randSpeed, 12.0 / randSpeed, 10.0 * randSpeed, 10.0 * randSpeed);
  GetMousePos(X, Y);
  HumanMMouse(eX, eY, ranX, ranY);
  MouseSpeed := j;
end;  }

{*******************************************************************************
procedure FastClick(button: Integer);
By: Flight
Description: Quickly click the mouse.
*******************************************************************************}
procedure FastClick(button: variant);
var
  x, y: integer;
  ibutton: Integer;
begin
  if VariantIsBoolean(button) then
  begin
    if (button) then
      iButton := mouse_left
    else
      iButton := mouse_right;
  end else
    iButton := button;

  if (iButton = mouse_move) then Exit;
  GetMousePos(x, y);
  HoldMouse(x, y, iButton);

  Wait(RandomRange(60, 150));

  GetMousePos(x, y);
  ReleaseMouse(x, y, iButton);
end;

procedure HumanMouseBox(X1, Y1, X2, Y2: Integer);
var
  FX, FY: Integer;
begin
  GaussBox(FX,FY,X1,Y1,X2,Y2);
  MMouse(FX,FY,0,0);
end;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////


procedure LoadOreInfo;
begin
  case lowercase(WHATTOSMELT) of
    'rune':
    begin
      Ore.POreDTM := DTMFromString('mbQAAAHicY2VgYNBjZGCQB2JFINYCYksg/gzEH4H4DxAzMTEw/ATSTgFhQNVMKJgVSKJjRiwYDADA3wXL');
      Bar.BarDTM := DTMFromString('mggAAAHicY2NgYNBlZGBQBWJ5INYDYjMgtgHi90D8EYh/ATEDEwPDTyjf2sMXIoCG+YEkKxbMiANDAACETQbx');
      Bur.BarBMP := BitmapFromString(34, 11, 'meJy9kcERwCAIBK3A/rs1j0yYCz' +
        'tH8GF4ISDLwZw/2YKdo4zHDoGCwmcixjM5rHHxgsKUNlH5xVp4l7v' +
        'mk8KyzsDpb4fiNKaZO4fYpQyYa+UkNyl1K5dd7+M6Cq+s+1efERVO' +
        'p6iP4AVBy6O/');
      Up.Upt := 'Run';
      X1.Coordinate := 129;
      Y1.Coordinate := 234;
      X2.Coordinate := 156;
      Y2.Coordinate := 263;
    end;

    'adamant':
    begin
      Ore.POreDTM := DTMFromString('mbQAAAHicY2VgYNBjZGCQB2JFINYCYksg/gzEH4H4DxAzMTEw/ATS9p72QNVMKJgVSKJjRiwYDAC4swWq');
      Bar.BarDTM := DTMFromString('mggAAAHicY2NgYNBlZGBQBWJ5INYDYjMgtgHi90D8EYh/ATEDEwPDTyjfyMgbIoCG+YEkKxbMiANDAAB6WQbQ');
      Bur.BarBMP := BitmapFromString(40, 12, 'meJzVUkEKwDAI8wX+/7cdTJAQNX' +
        'SwDpZbUkk01P0fWDe+t40BMzuRK2xP5C7ApGMuiTiMr2Sic/OipAF' +
        '6JZ38UydaQ8nES7Hi3tDRh2yrW2vYTrb+SMWeE63Yyd3UNdX7t32+' +
        'kitqr+fXfp7m5s/En4ZK9jDp08BEL6qR69E=');
      Up.Upt := 'Ada';
      X1.Coordinate := 30;
      Y1.Coordinate := 185;
      X2.Coordinate := 56;
      Y2.Coordinate := 213;
    end;

    'gold':
    begin
      Ore.POreDTM := DTMFromString('mbQAAAHicY2VgYNBjZGCQA2INIDYDYksg/gzFTEwMDH+A9Bcg3jFJEqiaCQXzA0lWNMyIBYMBAOQXBl8=');
      Bar.BarDTM := DTMFromString('mggAAAHicY2NgYNBlZGBQBWJ5INYDYjMgtgHi90D8EYh/ATEDEwPDTyh/Xq0YRAAN8wNJViyYEQeGAACiFAdS');
      Bur.BarBMP := BitmapFromString(30, 12, 'meJzNkksKADEIQz2B97+thQ5Ixg' +
        'QrZRaTVRvCq5+6/0uxNfTjrQnZzI5+Oo+O8CEZsRyQvTQBScbXsXj' +
        'uJX0Z6Ml9d3zo83gttX1CloQ7stM/vCNns2WwQZKr50010yv/ASV9' +
        'NEsA/QWwQ42u');
      Up.Upt := 'Gol';
      X1.Coordinate := 79;
      Y1.Coordinate := 132;
      X2.Coordinate := 105;
      Y2.Coordinate := 164;
    end;

    'silver':
    begin
      Ore.POreDTM := DTMFromString('mbQAAAHicY2VgYNBjZGCQA2INIDYDYksg/gzFTEwMDH+A9BcgbmnpAqpmQsH8QJIVDTNiwWAAAO8yBo4=');
      Bar.BarDTM := DTMFromString('mggAAAHicY2NgYNBlZGBQBWJ5INYDYjMgtgHi90D8EYh/ATEDEwPDTyi/oqIWIoCG+YEkKxbMiANDAACzkweO');
      Bur.BarBMP := BitmapFromString(37, 14, 'meJzlkVEOgDAIQzkB97+tJhpJfW' +
        'yMjyV+2C+srIXi/lMcF7TYqxxQ0syi2OhlD9RRme12+ESYmMTfIRf' +
        '5zDpDB0vNUs088sEMeLi83dKuHkPPoYMNM7yb8199hV0wRj7Bcqma' +
        'BAq7IophQ+jPFDIPR+h07JoKnoAclNQCzX2FT3ACr+7xZQ==');
      Up.Upt := 'Sil';
      X1.Coordinate := 179;
      Y1.Coordinate := 84;
      X2.Coordinate := 209;
      Y2.Coordinate := 116;
    end;

    'mithril':
    begin
      Ore.POreDTM := DTMFromString('mbQAAAHicY2VgYNBjZGCQB2JFINYCYksg/gzEH4H4DxAzMTEw/ATSpqYBQNVMKJgVSKJjRiwYDAC1WAWd');
      Bar.BarDTM := DTMFromString('mggAAAHicY2NgYNBlZGBQBWJ5INYDYjMgtgHi90D8EYh/ATEDEwPDTyjfyMgbIoCG+YEkKxbMiANDAAB6WQbQ');
      Bur.BarBMP := BitmapFromString(42, 12, 'meJzNkl0OwCAIgzmB97+tWzQ2pB' +
        'XUZMvWJ1N+PgYr5e+qTaehKJNK6pAm+3wzi2p7aId+Z1IJQL4Jmda' +
        'kuH06mmgHmHB0Wj+SroUWqHuebpLo+EDv6OZtyEOTOaNuYNGtl3Ta' +
        'PEVpyCN61Gp59wiR/3X0/pae5L9K7xdf5nc9QvdEEq6Ah/eTkPrT0' +
        'AVXUj6Z');
      Up.Upt := 'Mit';
      X1.Coordinate := 179;
      Y1.Coordinate := 133;
      X2.Coordinate := 205;
      Y2.Coordinate := 165;
    end;

    'iron':
    begin
      Ore.POreDTM := DTMFromString('mLgAAAHicY2JgYOgD4qlAPAeIFwOxuYIEGLMB2SDMCMUMDABqxgNR');
      Bar.BarDTM := DTMFromString('mggAAAHicY2NgYNBlZGBQBWJ5INYHYhsgNgXiz0D8EYh/AjEDE4T/C4jtbWwgAmiYA0iyYsGMODAEAAB9mwbX');
      Bur.BarBMP := BitmapFromString(30, 13, 'meJzVkTEOwDAIA3mB///bpuqADg' +
        'uhLgy5CQxxBEi38oAl8/hYcs6YgepcJrL6xzl5RU6UqRlSn50DsMo' +
        'G26G1Dc5ttXVu2y515r3mr5N5/3zIe2WqSlQoWo82OfYYU/E=');
      Up.Upt := 'on';
      X1.Coordinate := 126;
      Y1.Coordinate := 85;
      X2.Coordinate := 159;
      Y2.Coordinate := 117;
    end;

    'steel':
    begin
      Ore.POreDTM := DTMFromString('mLgAAAHicY2JgYOgD4qlAPAeIFwOxuYIEGLMB2SDMCMUMDABqxgNR');
      Bar.BarDTM := DTMFromString('mggAAAHicY2NgYNBlZGBQBWJ5INYDYjMgtgHi90D8EYh/ATEDEwPDTyg/NTERIoCG+YEkKxbMiANDAACejgdI');
      Bur.BarBMP := BitmapFromString(33, 11, 'meJzVUkEOwCAM8gX+/7e6rFljgD' +
        'KT7SKnBtmAau9nY9xY54TUfLGIoT1g64v8ywJ+K6v5vlK8nqY+6lQ' +
        'Fua/nd7JxQdm34iG5bArfAnilbGGSV/EAnvfb2FnUKy83kNfNj6FS' +
        'Sj7mCdDBwU0=');
      Up.Upt := 'on';
      X1.Coordinate := 30;
      Y1.Coordinate := 135;
      X2.Coordinate := 56;
      Y2.Coordinate := 165;
    end;

    'bronze':
    begin
      Ore.POreDTM := DTMFromString('mbQAAAHicY2VgYAhhZGDwAeJoII4HYmcgng7Ec4F4PhBPg/K3ppsDVTOhYH4gyYqGGbFgMAAA5mgGMA==');
      Ore.SOreDTM := DTMFromString('mbQAAAHicY2VgYAhhZGBwAWIfII4G4nggngbEU4F4LhDPh/LTk5OBqplQMD+QZEXDjFgwGAAA2rQGCA==');
      Bar.BarDTM := DTMFromString('mggAAAHicY2NgYNBlZGBQBWJ5INYHYhsgNgXiz0D8EYh/AjEDE4T/C4ittCUhAmiYH0iyYsGMODAEAABuDgal');
      Bur.BarBMP := BitmapFromString(46, 13, 'meJztkkEKgEAMA31B//9bPVlims' +
        'YiwnowNyGMY2zEH85estZkO7NQJk3qY1qhnhyQml15AjEmmVysDoh' +
        'MGpbKEwi9NMqPQwhpY7N+HaEmECkpgR3E1+TUHcTwn5mQhpxabvWu' +
        'SdXoIGYraSLP+NYEYyB43hi8/Lhm0jRwA/lIDjScQZM=');
      Up.Upt := 'Cop';
      X1.Coordinate := 26;
      Y1.Coordinate := 83;
      X2.Coordinate := 60;
      Y2.Coordinate := 118;
    end;
  end;
end;

function Walking(Color, Tolerance: Integer; SortFrom: tpoint): Boolean;
var
  i, x, y, rx, ry: Integer;
  TPA: TPointArray;
begin
  if not LoggedIn then Exit;
  FindNormalRandoms;
  FindColorsSpiralTolerance(MMCX, MMCY, TPA, Color, MMX1, MMY1, MMX2, MMY2, Tolerance);
  SortTPAFrom(TPA, SortFrom);

  for i := 0 to High(TPA) do
  begin
    x := TPA[i].x;
    y := TPA[i].y;

    rx := RandomRange(-6, 6);
    ry := RandomRange(-6, 6);
    if (not rs_OnMinimap(x + rx, y + ry)) then
    Continue;

    Mouse(x + rx, y + ry, 0, 0, true);
    FFlag(0);
    Wait(300 + Random(300));
    Result := True;
    Break;
  end;
end;

function FindBanker(x, y: Integer): Boolean;
var
  CTS, I: Integer;
  TPA: TPointArray;
  ATPA: Array of TPointArray;
begin
  CTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(0.09, 1.45);
  FindColorsTolerance(TPA, 2709600, MSX1, MSY1, MSX2, MSY2, 12);
  ColorToleranceSpeed(CTS);
  TPAToATPAExWrap(TPA, 15, 15, ATPA);
  SortATPASize(ATPA, True)
  SortATPAFromMidPoint(ATPA, Point(MSCX, MSCY))

  For I := 0 to High(ATPA) do
  begin
   // SMART_DebugATPA(True, ATPA);
    MiddleTPAEx(ATPA[i], x, y);
    if High(TPA) > 100 then
    MMouse(x, y, 2, 2);
    If(IsUpTextMultiCustom(['anker', 'Banker', 'alk'])) then
    begin
      Result := True;
      GetMousePos(x, y);
      Break;
    end;
  end;
end;

procedure DTMS;
begin
  CoalDTM := DTMFromString('mLgAAAHicY2JgYPBmZGAIBuLnQPZHIFZVlQFjViAbhBmhmIEBAGd6A1M=');
  CoalBagz := DTMFromString('mLgAAAHicY2JgYAhnZmAIBeIURgaGKCCeXRrGMGd6BgMXUA6EGaGYgQEAeuAEjA==');
  SmeltBMP := BitmapFromString(73, 18, 'meJztlL1qQkEQhRv/YuM72PgCdu' +
        'kCggRsLGysLKysBIuEGBBs09la2NgopMhzBPIQeZEsDAzLnLm7514' +
        'blcBX3D0ze87c9a7Dfn14p4wf/7k9pk/XSKfbC1xoMhvUeCQxptR2' +
        'PuXn+zdwof/8uUGiiTFB5B3KBqm5HGNZn8WozhDHKaqQJhWycMnzO' +
        'qllic2LRHlZfdClq8QmWEJnc6rMzIH3aSMLmqsuz3GD+VxRQVtTMn' +
        'HuLWDG/pg3s6C/viM2mM8VFdnlzo8l7NTQLLtFi8E9PYmLq7LMKum' +
        'ba/aiFcl+yYJjuMNoc0IpOijXDa1IDqsHBkk0S3cYbUgo7q+mEWYv' +
        'WpEcX/LE5q6IDWmlyFCWpuo2M5zX7Szpq2EacIuroKf74m4nM3Pg9' +
        'EZR9CdsqtUUY5jtVD3N54YF7wVWqylomO4kB/7a3i1/LLccTA==');
end;

procedure FR33DTMS;
begin
  FreeDTMS([TinOreDTM, CopperOreDTM, CoalDTM, Ore.POreDTM, Ore.SOreDTM, CoalBagz]);
  FreeBitmap(SmeltBMP);
end;

procedure WalkToFurnace;
begin
  Status('Walking To Furnace.');
  ToFurnace := [Point(4880, 3924), Point(4891, 3899), Point(4892, 3887), Point(4897, 3874), Point(4897, 3866), Point(4896, 3859), Point(4895, 3847)];
  SPS_WalkPath(ToFurnace);
end;

procedure WalkToBank;
begin
  Status('Walking To Bank.');
  ToBank := [Point(4896, 3842), Point(4906, 3856), Point(4900, 3872), Point(4901, 3905), Point(4876, 3925)];
  SPS_WalkPath(ToBank);
end;

function Failsafe(Reason: String):Boolean;
begin
  LogOut;
  Wait(50)
  Writeln(Reason)
  Disguise(Reason)
  TerminateScript;
  Result := True;
end;

procedure Proggy;
var
  CurrentEXP, XP, XPH: integer;
begin
  Status('Reporting Progress.');
  if (not(LoggedIn)) then
  begin
    Exit;
  end;

  CurrentEXP := GetXPBarTotal;
  XPH := round((CurrentEXP - StartEXP) / (GetTimeRunning / 3600000.0));
  XP := (CurrentEXP - StartEXP);

  ClearDebug;
  Writeln('############### AIO SMELTER ################');
  Writeln('|= Player : ' + Players[CurrentPlayer].Nick);
  Writeln('|= Time Running : ' + TimeRunning);
  Writeln('|= Smelting : ' + WHATTOSMELT);
  Writeln('|= Bars Made : ' + IntToStr(Bars));
  Writeln('|= EXP Gained : ' + IntToStr(XP));
  Writeln('############################################');

  Smart_ClearCanvas;
  SMART_DrawTextEx(False, 8, 79, SmallCharsNS, 'AIO SMELTER', clAqua);
  SMART_DrawTextEx(False, 8, 92, SmallCharsNS, 'Player:' + Players[CurrentPlayer].Nick, clAqua);
  SMART_DrawTextEx(False, 8, 105, SmallCharsNS, 'Time Running:' + TimeRunning, clAqua);
  SMART_DrawTextEx(False, 8, 118, SmallCharsNS, 'Smelting:' + WHATTOSMELT, clAqua);
  SMART_DrawTextEx(False, 8, 131, SmallCharsNS, 'Bars Made:' + IntToStr(Bars), clAqua);
  SMART_DrawTextEx(False, 8, 143, SmallCharsNS, 'XP Gained:' + IntToStr(XP), clAqua);
  SMART_DrawTextEx(False, 8, 156, SmallCharsNS, 'XP/H:' + IntToStr(XPH), clAqua);
end;

function FindBankBooth:Boolean;
var
  BankingToolong, x, y, i, H, CTS :Integer;
  TPA: TpointArray;
  ATPA: T2DPointArray;

begin
  if Bankscreen then
  begin
    Result := true;
    Exit;
  end;

  Marktime(BankingToolong)
  CTS := GetToleranceSpeed;
  ColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(0.02, 0.64);

  if FindColorsTolerance(TPA, 9415114, MSX1, MSY1, 515, 196, 7)  then
  begin

    SetColorToleranceSpeed(CTS);
    SetToleranceSpeed2Modifiers(0.02, 0.02);

    SplitTPAExWrap(TPA, 15, 12, ATPA);
    SortATPAFromMidPoint(ATPA, Point(MSCX, MSCY));
    H := High(ATPA)
    begin
      for i:=0 to H do
      begin
        MiddleTpaEx(ATPA[i], x, y);
        MMouse(x, y, 2, 2)
        if WaitUptextMulti(['boo','Ban','ank', 'nk B'] , 800) then
        begin
          Fastclick(True);
          if WaitFunc(@Bankscreen, 100, 5000) then
          begin
            Result :=True;
            Exit;
          end;
        end;
        if TimeFromMark(BankingTooLong) > 25000 then FailSafe('Didnt find the bank')
      end;
    end;
  end;
end;


function FindWithdraw(BMP:Integer): Boolean;       //Changed from here and banking procedure :) Woop woop
begin
  if FindBitmapToleranceIn(BMP, x, y, MSX1, MSY1, MSX2, MSY2, 35) then
  begin
    Writeln('ddd');
    Result := True;
    Exit;
  end else Exit;
end;

function FullCoalBag: Boolean;
begin
if FindBlackChatMessage('full') then Result := True
else Result := False;
end;

procedure WithdrawCoalBag;
var
  Attempt : Integer;
begin
  repeat
    MouseBankSlot(SECONDARYORESLOT, mouse_right);
    WaitOption('ll', 1200);
    MMouseItem(1)
    Fastclick(False)
    WaitOption('ill', 1200);
    if WaitFunc(@FullCoalBag, 100, 1200) then begin Deposit(2, 28, True) Deposit(2, 28, 1)  Exit; end;
    Inc(Attempt)
    if Attempt >= 5 then Failsafe('Did not fill Coalbag');
  until(Invcount = 1)
end;

procedure WithdrawPrimaryOre;
begin
  MouseBankSlot(PRIMARYORESLOT, 3);
  if WaitUpText(Up.Upt, 500) then
  begin
    ClickMouse2(False);
    case COALBAG of
      False:
      begin
        case (lowercase(WHATTOSMELT)) of

          'gold':
          begin
            ChooseOption('ll');
          end;

          'silver':
          begin
            ChooseOption('ll');
          end;

          'iron':
          begin
            ChooseOption('ll');
          end;

          'bronze':
          begin
            if (not(ChooseOption('14'))) then
            begin
              MouseBankSlot(PRIMARYORESLOT, 3);
              ChooseOption('X');
              Wait(500 + Random(500));
              TypeSend('14');
            end else ChooseOption('14');
          end;

          'steel':
          begin
            if (not(ChooseOption('9'))) then
            begin
              MouseBankSlot(PRIMARYORESLOT, 3);
              FastClick(False);
              ChooseOption('X');
              Wait(500 + Random(500));
              TypeSend('9');
            end else ChooseOption('9');
          end;

          'mithril':
          begin
            if (not(ChooseOption('5'))) then
            begin
              MouseBankSlot(PRIMARYORESLOT, 3);
              FastClick(False);
              ChooseOption('X');
              Wait(500 + Random(500));
              TypeSend('5');
            end else ChooseOption('5');
          end;

          'adamant':
          begin
            if (not(ChooseOption('4'))) then
            begin
              MouseBankSlot(PRIMARYORESLOT, 3);
              FastClick(False);
              ChooseOption('X');
              Wait(500 + Random(500));
              TypeSend('4');
            end else ChooseOption('4');
          end;

          'rune':
          begin
            if (not(ChooseOption('3'))) then
            begin
              MouseBankSlot(PRIMARYORESLOT, 3);
              FastClick(False);
              ChooseOption('X');
              Wait(500 + Random(500));
              TypeSend('3');
            end else ChooseOption('3');
          end;
        end;
      end;
      True:
      begin
        case lowercase(WHATTOSMELT) of
          'steel':
          begin
            if (not(ChooseOption('18'))) then
            begin
              MouseBankSlot(PRIMARYORESLOT, 3);
              FastClick(False);
              ChooseOption('X');
              Wait(500 + Random(500));
              TypeSend('18');
            end else ChooseOption('18');
          end;

          'mithril':
          begin
            if (not(ChooseOption('11'))) then
            begin
              MouseBankSlot(PRIMARYORESLOT, 3);
              FastClick(False);
              ChooseOption('X');
              Wait(500 + Random(500));
              TypeSend('11');
            end else ChooseOption('11');
          end;

          'adamant':
          begin
            if (not(ChooseOption('7'))) then
            begin
              MouseBankSlot(PRIMARYORESLOT, 3);
              FastClick(False);
              ChooseOption('X');
              Wait(500 + Random(500));
              TypeSend('7');
            end else ChooseOption('7');
          end;

          'rune':
          begin
            if (not(ChooseOption('6'))) then
            begin
              MouseBankSlot(PRIMARYORESLOT, 3);
              FastClick(False);
              ChooseOption('X');
              Wait(500 + Random(500));
              TypeSend('6');
            end else ChooseOption('6');
          end;
        end;
      end;
    end;
  end;
end;

procedure WithdrawSecondaryOre;
begin
  MouseBankSlot(SECONDARYORESLOT, 3);
  if WaitUpText('re', 500) then
  begin
    ClickMouse2(False);
    if WHATTOSMELT = 'bronze' then
    begin
      ChooseOption('14');
    end else ChooseOption('ll');
  end;
end;

procedure Bank;
var
 i, Bx, By: integer;
begin
  if (not(IsMoving)) then
  begin
    repeat
      if BankScreen or PinScreen then Break;
      if FindBanker(Bx, By) or FindBankBooth then
      begin
        ClickMouse2(False);
        WaitOption('Bank Banker', 400);
       if  WaitFunc(@BankScreen, 100, 3000)  or WaitFunc(@PinScreen, 100, 3000) then Break;
      end;

      while IsMoving do
      Wait(200);
      Status('Opened Bank Successfully.');
    until(BankScreen or PinScreen)
  end;

  if (BankScreen) or (PinScreen) then
  begin
    if (PinScreen) then
      repeat
        InPin(Players[0].Pin);
      until (BankScreen);

    if BankScreen then
    begin

      case COALBAG of
        False:
        begin
          DepositAll;
          if InvCount < 2 then
          begin
            repeat
              WithdrawPrimaryOre;
              Wait(400 + Random(500));
            until(InvCount > 2)
            if (lowercase(WHATTOSMELT) = 'bronze') or (lowercase(WHATTOSMELT) = 'steel') or (lowercase(WHATTOSMELT) = 'mithril') or(lowercase(WHATTOSMELT) = 'adamant') or (lowercase(WHATTOSMELT) = 'rune') then
            begin
              repeat
                WithdrawSecondaryOre;
                Wait(400 + Random(500));
              until(InvCount > 12)
            end else CloseBank;
          end;
        end;
        True:
        begin
          Deposit(2, 28, True)

          for i := 2 to 28 do
            if ExistsItem(i) then
            begin
              MMouseItem(i)
              Wait(150 + Random(50))
              Fastclick(False)
              WaitOption('Dep', 1200);
            end;

          if InvCount < 2 then
          begin
            WithdrawCoalBag;
            if (lowercase(WHATTOSMELT) = 'bronze') or (lowercase(WHATTOSMELT) = 'steel') or (lowercase(WHATTOSMELT) = 'mithril') or(lowercase(WHATTOSMELT) = 'adamant') or (lowercase(WHATTOSMELT) = 'rune') then
            begin
              repeat
                WithdrawPrimaryOre;
                Wait(1200)
              until(InvCount > 4)
              repeat
                WithdrawSecondaryOre;
                Wait(1200)
              until(InvCount > 12)
            end else CloseBank;
          end;
        end;
      end;
    end;
  end;
end;

function SmeltingScreen: Boolean;    // Creds To Ashaman baby
var
  CTS: Integer;
begin
  CTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(2);

  SetColorSpeed2Modifiers(0.02, 0.36);

  If CountColorTolerance(8280838,398,361-50,480,369-50,25) > 500 Then
    Result:=True;

  ColorToleranceSpeed(CTS);
  SetColorSpeed2Modifiers(0.2, 0.2);

end;

function FindFurnace:Boolean;
var
  Attempt, FurnToolong, x, y, i, H, CTS :Integer;
  TPA: TpointArray;
  ATPA: T2DPointArray;

begin
  repeat
  if Smeltingscreen then
  begin
    Result := true;
    Exit;
  end;

  Marktime(FurnToolong)
  CTS := GetToleranceSpeed;
  ColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(0.04, 1.05);

  if FindColorsTolerance(TPA, 10466246, 0, 150, 276, 340, 16)  then
    begin
       SetColorToleranceSpeed(CTS);
       SetToleranceSpeed2Modifiers(0.02, 0.02);

       SplitTPAExWrap(TPA, 20, 20, ATPA);

       SortATPAFromMidPoint(ATPA, Point(190, 213));
       SortATPASize(ATPA, True);
       H := High(ATPA)

    //  SMART_DebugATPA(True, ATPA);

      for i:=0 to H do
      begin
        MiddleTpaEx(ATPA[i], x, y);
        MMouse(x, y, 5, 5);
        if WaitUptextMulti(['Smel', 'Furn', 'ace'] , 800) then
        begin
          Fastclick(True);
          if WaitFunc(@SmeltingScreen, 100 , 3000) then
          begin
            Result := True;
            Exit;
          end;
        end else if (TimeFromMark(FurnToolong) > 15000) then Break;
      end;
    end;

  SPS_WalkToPos(Point(4895, 3847))
  Inc(Attempt);
  if (Attempt >= 5) then Failsafe('Did not find furnace');
  until(SmeltingScreen)
end;

procedure AntiBan;
begin
  Status('AntiBan');
  if(not(LoggedIn))then
  Exit;
  FindNormalRandoms;
  case Random(100) of
  0..20:
    begin
      HoverSkill('Smithing', false);
      Wait(1500 + Random(1000));
      GameTab(Tab_Inv);
    end;
  21..80:
    begin
      Wait(1000 + Random(5000));
    end;
  81..100:
    begin
      GameTab(Tab_Stats);
      Wait(400 + Random(8000));
      GameTab(Tab_Inv);
    end;
  end;
end;

procedure SmeltThem;
var
  JustInCase, x, y, g:integer;
begin
  if SmeltingScreen then
  begin
    MarkTime(JustInCase)
    Status('Smelting Bars.');

    if (not(FindBitmapToleranceIn(Bur.BarBMP, X, Y, 273, 44, 370, 90, 65))) then
    begin
      repeat
        HumanMouseBox(X1.Coordinate, Y1.Coordinate, X2.Coordinate, Y2.Coordinate);
        Fastclick(True);
        Wait(500 + Random(750));
        if TimeFromMark(JustInCase) > 5000 then Failsafe('Did not Find my Bitmap');
      until(FindBitmapToleranceIn(Bur.BarBMP, X, Y, 273, 44, 370, 90, 15))
    end;

    repeat
      if FindBitmapToleranceIn(SmeltBMP, X, Y, MSX1, MSY1, MSX2, MSY2, 45) then
      begin
        MMouse(x, y, 1, 1);
        FastClick(True);
        Wait(1200);
      end;
    until(not(FindBitmapToleranceIn(Bur.BarBMP, X, Y, 273, 44, 370, 90, 15)));

    repeat
      MarkTime(g);
      if TimeFromMark(g) > 12000 then
      begin
        AntiBan;
      end;
      Proggy;
      Wait(2000 + Random(1500));
    until(not(FindDTMRotated(Ore.POreDTM, x, y, MIX1, MIY1, MIX2, MIY2, -Pi/4, Pi/4, Pi/60, aFound)))
  end;
end;

procedure Rest;
var
  S: String;
begin
  if not (LoggedIn) then
  Exit;
  if (GetMMLevels('Run', S) <= 25) then
  RestUntil(RandomRange(75,100))
end;

begin
  ClearDebug;
  {$IFDEF SIMBAMAJOR980}
    SMART_SERVER := 24;
    SMART_MEMBERS := MEMBERS;
    SMART_SIGNED := TRUE;
    SMART_SUPERDETAIL := FALSE;
  {$ELSE}
    SMART_FIXSPEED := TRUE;
  {$ENDIF}
  ActivateClient;
  SetupSRL;
  SPS_Setup(RUNESCAPE_SURFACE, ['12_9']);
  LoadOreInfo;
  SRL_SixHourFix := True;
  DTMS;
  DeclarePlayers;
  if not (LoggedIn) then
  begin
    LoginPlayer;
  end;
  Wait(4000 + Random(400));
  StartEXP := GetXPBarTotal;
  FindNormalRandoms;
  ClickNorth(SRL_ANGLE_HIGH);
  repeat
    if (not(LoggedIn)) then
    begin
      LoginPlayer;
    end;
    if (not(InvFull)) then
    begin
      IncEx(Bars, CountItems('dtm', Bar.BarDTM, []));
      Proggy;
      WalkToBank;
      Rest;
      repeat
        Bank;
      until(InvCount > 25)
    end;
    if (InvCount > 12) then
    begin
      WalkToFurnace;
      while IsMoving do
      Wait(200);
      case COALBAG of
        False:
        begin
          FindFurnace;
          SmeltThem;
        end;
        True:
        begin
          FindFurnace;
          SmeltThem;
        end;
      end;
    end;
  until(False)
  AddOnTerminate('FR33DTMS');
end.
